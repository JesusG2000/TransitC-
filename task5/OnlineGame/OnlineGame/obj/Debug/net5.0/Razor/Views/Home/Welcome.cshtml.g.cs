#pragma checksum "D:\transit\c#\task5\OnlineGame\OnlineGame\Views\Home\Welcome.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1935cc400fdf0ba36fd8be43fc6f90254d935ed2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Welcome), @"mvc.1.0.view", @"/Views/Home/Welcome.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1935cc400fdf0ba36fd8be43fc6f90254d935ed2", @"/Views/Home/Welcome.cshtml")]
    public class Views_Home_Welcome : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Welcome.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1935cc400fdf0ba36fd8be43fc6f90254d935ed23908", async() => {
                WriteLiteral("\r\n    <meta charset=\"utf-8\" />\r\n    <title>Welcome</title>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "1935cc400fdf0ba36fd8be43fc6f90254d935ed24234", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <link href=""//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"" rel=""stylesheet"" id=""bootstrap-css"">
    <script src=""//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js""></script>
    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js""></script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1935cc400fdf0ba36fd8be43fc6f90254d935ed26512", async() => {
                WriteLiteral(@"

    <div class=""container"">
        <div class=""container"">
            <div class=""row"">
                <div class=""col-lg-10 col-md-7 col-sm-5 border border-primary rounded"">
                    <div class=""form-group row"">
                        <form action=""Game"" method=""post"">
                            <div>
                                <input id=""gameId"" name=""gameId"" type=""hidden"" />
                                <input id=""gameTags"" name=""gameTags"" type=""hidden"" />
                                <div class=""input-group mb-3"">
                                    <input type=""text"" class=""form-control"" placeholder=""Recipient's username"" aria-label=""Recipient's username"" aria-describedby=""basic-addon2"" id=""gameName"" name=""gameName"">
                                    <div class=""input-group-append"">
                                        <span class=""input-group-text"" id=""basic-addon2"">Name</span>
                                    </div>
                                </");
                WriteLiteral(@"div>
                            </div>

                            <div>
                                <button class=""btn btn-success"" onclick=""createGame()"">Create game</button>
                            </div>
                        </form>
                        <div>
                            <div class=""input-group mb-3"">
                                <div class=""input-group-prepend"">
                                    <span class=""input-group-text"" id=""basic-addon3"">Tags</span>
                                </div>
                                <input type=""text"" class=""form-control""  id=""txtAutoComplete"" list=""languageList"" aria-describedby=""basic-addon3"">
                                <button class=""btn btn-primary"" onclick=""createTag()"">Create tag</button>
                            </div>

                        </div>
                        <form>
                            <i class=""fas fa-search"" aria-hidden=""true""></i>
                            <input c");
                WriteLiteral(@"lass=""form-control form-control-md ml-3 w-75"" type=""text"" placeholder=""Search by tags""
                                   aria-label=""Search"" id=""search"" onchange=""showResult()"">
                        </form>
                        <div id=""tags"" class=""container row"">
                            
                        </div>

                    </div>
                </div>

            </div>
        </div>
        <div id=""some""></div>

        <div class=""container"">
            <div class=""col-md-9"" id=""gameList"">

            </div>
        </div>
    </div>

    <datalist id=""languageList"">
      
    </datalist>




    <script>


        var elemsInsideRow = 0;
        var rowId = 0;
        var gameId = 20;
        var tags = [];
        var tagId = 0;

        async function showResult() {
            let value = document.getElementById('search').value;
            
            if (value == '') {
                showTableList();
            } else {
");
                WriteLiteral(@"                let response = await fetch(""/game/search/"" + value, {
                    method: ""GET"",
                    headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" }
                });
                if (response.ok === true) {
                    document.getElementById('gameList').innerHTML = '';
                    let gameList = await response.json();
                    gameList.forEach
                        (game => {
                            let languageList = document.getElementById('languageList');
                            for (let i = 0; i < game['tags'].length; i++) {
                                languageList.innerHTML += ' <option value=""' + game['tags'][i] + '"" />'
                            }
                            console.log(game['name'])
                            genTable(game['name'], game['id'], game['countOfPlayers'], game['tags']);
                        });
                }
            }
        }
        

");
                WriteLiteral(@"        function createGame() {
            let mainList = document.getElementById('gameList');
            
            if (elemsInsideRow === 0) {
                let divRow = document.createElement('div');
                divRow.className = 'row'
                divRow.id = 'row' + rowId;
                mainList.appendChild(divRow);
            }
            if (elemsInsideRow < 2) {
                genRowBody();
            } else {

                rowId++;
                elemsInsideRow = 0;
                createGame();
            }
        }
        function genRowBody() {
            let divRow = document.getElementById('row' + rowId);

            let borderDiv = document.createElement('div');
            borderDiv.className = 'col-sm border border-primary rounded';

            let divForm = document.createElement('form');
            divForm.action = 'Game';
            divForm.method = 'post';

            let divGame = document.createElement('div');
            div");
                WriteLiteral(@"Game.className = 'form-group row'



            let divGameInput = document.createElement('input');
            let gameName = document.getElementById('gameName').value;
            divGameInput.type = 'hidden'
            divGameInput.id = 'name' + gameId;
            divGameInput.name = 'gameName';
            divGameInput.value = gameName !== '' ? gameName : gameId

            let pElem = document.createElement('p');
            pElem.innerHTML ="" Name "" + gameName !== '' ? gameName : gameId;

            let pElemTag = document.createElement('p');
            for (let i = 0; i < tags.length; i++) {
                pElem.innerHTML += tags[i];
            }
           

            let inputGameName = document.createElement('input');
            inputGameName.type = 'hidden';
            inputGameName.name = 'gameId';
            inputGameName.value = gameId;

            document.getElementById('gameId').value = gameId;
            document.getElementById('gameName').value = gam");
                WriteLiteral(@"eName !== '' ? gameName : gameId;
            document.getElementById('gameTags').value = tags;

            console.log(document.getElementById('gameId').value);
            console.log(document.getElementById('gameName').value);

            let divJoin = document.createElement('div');
            divGame.className = 'form-group row'

            let inputJoin = document.createElement('input');
            inputJoin.type = 'submit';
            inputJoin.id = 'game' + gameId;
            inputJoin.value = 'Join';


            divGame.appendChild(pElemTag);
            divGame.appendChild(pElem);
            divGame.appendChild(divGameInput);
            divGame.appendChild(inputGameName);
            divJoin.appendChild(inputJoin);

            divForm.appendChild(divGame);
            divForm.appendChild(divJoin);

            borderDiv.appendChild(divForm);

            divRow.appendChild(borderDiv);

            gameId++;
            elemsInsideRow++;
            document.g");
                WriteLiteral(@"etElementById('tags').innerHTML = '';
            tags = []
            tagId = 0
            // document.getElementById('gameName').value = '';


        }

        function genRowBodyFromExistGame(gameName, gameId, countOfPlayers,gameTags) {
            let divRow = document.getElementById('row' + rowId);

            let borderDiv = document.createElement('div');
            borderDiv.className = 'col-sm border border-primary rounded';

            let divForm = document.createElement('form');
            divForm.action = 'Game';
            divForm.method = 'post';

            let divGame = document.createElement('div');
            divGame.className = 'form-group row'

            let pElem = document.createElement('p');
            pElem.innerHTML = "" Name "" + gameName;
            console.log(gameName)
            let pElemTag = document.createElement('p');
            pElemTag.innerHTML +="" Tags ""
            for (let i = 0; i < gameTags.length; i++) {
                pElem");
                WriteLiteral(@"Tag.innerHTML += gameTags[i]+"" , "";
            }

            let divGameInput = document.createElement('input');
            divGameInput.type = 'hidden'
            divGameInput.id = gameName;
            divGameInput.name = 'gameName';
            divGameInput.value = gameName;

            let inputGameName = document.createElement('input');
            inputGameName.type = 'hidden';
            inputGameName.name = 'gameId';
            inputGameName.value = gameId;

            let divJoin = document.createElement('div');
            divGame.className = 'form-group row'

            let inputJoin = document.createElement('input');
            inputJoin.type = 'submit';
            inputJoin.id = 'game' + gameId;
            inputJoin.value = 'Join';

            if (countOfPlayers === 2) {
                inputJoin.disabled = true;
                divForm.action = '';
                divForm.method = '';
            }


            divGame.appendChild(pElemTag);
          ");
                WriteLiteral(@"  divGame.appendChild(pElem);
            divGame.appendChild(divGameInput);
            divGame.appendChild(inputGameName);
            divJoin.appendChild(inputJoin);

            divForm.appendChild(divGame);
            divForm.appendChild(divJoin);

            borderDiv.appendChild(divForm);

            divRow.appendChild(borderDiv);

            this.gameId++;
            this.elemsInsideRow++;


        }

        async function showTableList() {
            let response = await getGameList();
            if (response.ok === true) {
                let gameList = await response.json();
                gameList.forEach
                    (game => {
                        let languageList = document.getElementById('languageList');
                        for (let i = 0; i < game['tags'].length; i++) {
                            languageList.innerHTML += ' <option value=""' + game['tags'][i]+'"" />'
                        }
                        console.log(game['name'])");
                WriteLiteral(@"
                        genTable(game['name'], game['id'], game['countOfPlayers'],game['tags']);
                    });
            }
        }

        function genTable(gameName, gameId, countOfPlayers,gameTable) {
            let mainList = document.getElementById('gameList');
            if (elemsInsideRow === 0) {
                let divRow = document.createElement('div');
                divRow.className = 'row'
                divRow.id = 'row' + rowId;
                mainList.appendChild(divRow);
            }
            if (elemsInsideRow < 2) {

                genRowBodyFromExistGame(gameName, gameId, countOfPlayers, gameTable);

            } else {

                rowId++;
                elemsInsideRow = 0;
                genTable(gameName, gameId, countOfPlayers, gameTable);
            }
        }

        async function getGameList() {
            return await fetch(""/game/getAll"", {
                method: ""GET"",
                headers: { ""Accept"": ""applica");
                WriteLiteral(@"tion/json"", ""Content-Type"": ""application/json"" }
            });
        }

        function createTag() {
            let divElem = document.getElementById('tags');
            tags[tagId] = document.getElementById('txtAutoComplete').value;
            divElem.innerHTML += ' <div class=""border border-primary rounded"">' +
                '<p class=""text-center"">' + tags[tagId] + '</p>' +
                '</div>';
            tagId++;
        }

        showTableList();
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
