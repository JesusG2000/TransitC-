#pragma checksum "D:\transit\c#\task5\OnlineGame\OnlineGame\Views\Home\Game.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "092df92a6b51517c0c5e8b5aa6ae27ed9a36509f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Game), @"mvc.1.0.view", @"/Views/Home/Game.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"092df92a6b51517c0c5e8b5aa6ae27ed9a36509f", @"/Views/Home/Game.cshtml")]
    public class Views_Home_Game : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Game.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/signalr/dist/browser/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "092df92a6b51517c0c5e8b5aa6ae27ed9a36509f4268", async() => {
                WriteLiteral("\r\n    <meta charset=\"utf-8\" />\r\n    <title></title>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "092df92a6b51517c0c5e8b5aa6ae27ed9a36509f4587", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "092df92a6b51517c0c5e8b5aa6ae27ed9a36509f6557", async() => {
                WriteLiteral("\r\n    <div id=\"gameField\">\r\n\r\n    </div>\r\n");
#nullable restore
#line 12 "D:\transit\c#\task5\OnlineGame\OnlineGame\Views\Home\Game.cshtml"
     foreach (string country in ViewBag.gameTags)
    {

#line default
#line hidden
#nullable disable
                WriteLiteral("        <input type=\"hidden\" name=\"tag\"");
                BeginWriteAttribute("value", " value=\"", 301, "\"", 317, 1);
#nullable restore
#line 14 "D:\transit\c#\task5\OnlineGame\OnlineGame\Views\Home\Game.cshtml"
WriteAttributeValue("", 309, country, 309, 8, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral("/>\r\n");
#nullable restore
#line 15 "D:\transit\c#\task5\OnlineGame\OnlineGame\Views\Home\Game.cshtml"
    }

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "092df92a6b51517c0c5e8b5aa6ae27ed9a36509f7700", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script>
        document.get
        var CREATOR_CONNECTED = 1;
        var BOTH_CONNECTED = 2;
        var gameIdGlobal;
        let canMove;
        var creator;
        var player;
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl(""/game"")
            .build();

        hubConnection.start();


        async function createCreator(gameId, gameName,gameTags) {
            let id = gameId;
            let name = gameName.toString();
            let array = gameTags.split(',');
            return await fetch(""/game/createCreator"", {
                    method: ""POST"",
                headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" },
                body: JSON.stringify({
                    id: id,
                    name: name,
                    gameTags: array
                }
                )
                });
        }

        async function getGame(gameId) {
            return await fetch(""/gam");
                WriteLiteral(@"e/""+ gameId, {
                    method: ""GET"",
                headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" },
                });
        }

        async function finistGame(gameId) {
            return await fetch(""/game/""+ gameId, {
                    method: ""PUT"",
                headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" },
                });
        }

        async function connectPlayer(res) {
            return await fetch(""/game/connectPlayer/"" +  res, {
                    method: ""POST"",
                    headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" }
                });

        }

        async function getPlayerCountInGame(gameId) {
            return await fetch(""/game/playerCountInGame/""+gameId, {
                method: ""GET"",
                headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" }
            });
        }

        async fu");
                WriteLiteral(@"nction wait(gameId) {
            let responce = await getPlayerCountInGame(gameId);
            let CountData = await responce.json();
            let playerCount = CountData['count'];
            if (playerCount === BOTH_CONNECTED) {
              console.log(""can create game"")
              console.log(creator)
              console.log(player)
              return true;
            }
          return false;
        }

        async function connectPlayers() {
           let gameId = ");
#nullable restore
#line 92 "D:\transit\c#\task5\OnlineGame\OnlineGame\Views\Home\Game.cshtml"
                   Write(ViewData["gameId"]);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
           gameIdGlobal = gameId;
           let responce = await getPlayerCountInGame(gameId);
            if (responce.ok === true) {
                hubConnection.invoke(""Send"", gameId);

                let CountData = await responce.json();
                let playerCount = CountData['count'];

                if (playerCount == CREATOR_CONNECTED) {
                    let res = await connectPlayer(gameId);
                    let responce = await res.json();
                    player = responce;
                    createGameField();


                }
            } else {
                hubConnection.invoke(""Send"", gameId);

                let gameName = ");
#nullable restore
#line 112 "D:\transit\c#\task5\OnlineGame\OnlineGame\Views\Home\Game.cshtml"
                          Write(ViewData["gameName"]);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

                let tagsName = document.getElementsByName('tag');
                let res = await createCreator(gameId, gameName,tagsName[0].value);
                let responce = await res.json();
                creator = responce;
                console.log(responce);

                let gameField = document.getElementById('gameField');
                gameField.innerHTML = 'Waiting for other player...';
                hubConnection.on(""Create"", function (data) {
                    createGameField()
                });

            }
        }

        async function createGameField() {

            let divElem = document.createElement('div');
            divElem.id = 'game';

            let gameField = document.getElementById('gameField');
            gameField.innerHTML = '';
            gameField.append(divElem);
            for (let i = 0; i < 9; i++) {
                let divElem = document.createElement('button')
                divElem.className = 'block';
       ");
                WriteLiteral(@"         divElem.id = i;
                divElem.onclick = async (event) => {
                  // await checkMove(event)
                   await move(event)
                };
                document.getElementById('game').append(divElem);
            }
        }

        async function move(event) {

            let response = await getGame(gameIdGlobal);
            let game = await response.json();
            console.log('2 ' + canMove)
            console.log('begin move')
            hubConnection.invoke(""Move"", game, parseInt(event.target.id));
            console.log('endMove')
        }

        function checkWinner() {
            var allBlock = document.getElementsByClassName('block');
            let draw = true;
            for (let i = 0; i < 9; i++) {
                if (allBlock[i].innerHTML == '') {
                    draw = false;
                    break;
                }
            }
            if (!draw) {
                if (
                    (all");
                WriteLiteral(@"Block[0].innerHTML === 'X' && allBlock[1].innerHTML === 'X' && allBlock[2].innerHTML === 'X') ||
                    (allBlock[3].innerHTML === 'X' && allBlock[4].innerHTML === 'X' && allBlock[5].innerHTML === 'X') ||
                    (allBlock[6].innerHTML === 'X' && allBlock[7].innerHTML === 'X' && allBlock[8].innerHTML === 'X') ||
                    (allBlock[0].innerHTML === 'X' && allBlock[3].innerHTML === 'X' && allBlock[6].innerHTML === 'X') ||
                    (allBlock[1].innerHTML === 'X' && allBlock[4].innerHTML === 'X' && allBlock[7].innerHTML === 'X') ||
                    (allBlock[2].innerHTML === 'X' && allBlock[5].innerHTML === 'X' && allBlock[8].innerHTML === 'X') ||
                    (allBlock[0].innerHTML === 'X' && allBlock[4].innerHTML === 'X' && allBlock[8].innerHTML === 'X') ||
                    (allBlock[2].innerHTML === 'X' && allBlock[4].innerHTML === 'X' && allBlock[6].innerHTML === 'X')
                ) {
                    alert(""X wons"");
                ");
                WriteLiteral(@"    finistGame(gameIdGlobal)
                    document.location.href = ""/home/welcome"";

                }

                if (
                    (allBlock[0].innerHTML === '0' && allBlock[1].innerHTML === '0' && allBlock[2].innerHTML === '0') ||
                    (allBlock[3].innerHTML === '0' && allBlock[4].innerHTML === '0' && allBlock[5].innerHTML === '0') ||
                    (allBlock[6].innerHTML === '0' && allBlock[7].innerHTML === '0' && allBlock[8].innerHTML === '0') ||
                    (allBlock[0].innerHTML === '0' && allBlock[3].innerHTML === '0' && allBlock[6].innerHTML === '0') ||
                    (allBlock[1].innerHTML === '0' && allBlock[4].innerHTML === '0' && allBlock[7].innerHTML === '0') ||
                    (allBlock[2].innerHTML === '0' && allBlock[5].innerHTML === '0' && allBlock[8].innerHTML === '0') ||
                    (allBlock[0].innerHTML === '0' && allBlock[4].innerHTML === '0' && allBlock[8].innerHTML === '0') ||
                    (allBlock[2]");
                WriteLiteral(@".innerHTML === '0' && allBlock[4].innerHTML === '0' && allBlock[6].innerHTML === '0')
                ) {
                    alert(""0 wons"");
                    finistGame(gameIdGlobal)
                    document.location.href = ""/home/welcome"";

                }
            } else {
                alert(""draw"");
                finistGame(gameIdGlobal)
                document.location.href = ""/home/welcome"";
            }




        }

        window.onload = function ready() {

            connectPlayers()
           // beginGame()
        }

        hubConnection.on(""Update"", function (canMove,blockId, isUserMove) {
            console.log('in update')
            if (canMove) {
                if (isUserMove) {
                    console.log('in update true')
                    document.getElementById(blockId).innerHTML = 'X'
                } else {
                    console.log('in update false')
                    document.getElementById(blockId).innerHTML =");
                WriteLiteral(" \'0\'\r\n                }\r\n                checkWinner()\r\n            } else {\r\n                alert(\"not u\")\r\n            }\r\n        });\r\n\r\n");
                WriteLiteral("    </script>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
