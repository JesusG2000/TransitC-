#pragma checksum "D:\transit\c#\task6\notes\notes\Views\Home\Welcome.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dd5a184f80b191fafd605b1fe09071ef98191ff4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Welcome), @"mvc.1.0.view", @"/Views/Home/Welcome.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dd5a184f80b191fafd605b1fe09071ef98191ff4", @"/Views/Home/Welcome.cshtml")]
    public class Views_Home_Welcome : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/StyleSheet.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/cross.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/JavaScript.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/signalr/dist/browser/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dd5a184f80b191fafd605b1fe09071ef98191ff45000", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"" />
    <title>Welcome</title>
    <link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"">
    <link href=""https://fonts.googleapis.com/icon?family=Material+Icons"" rel=""stylesheet"">
    <link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.6.3/css/all.css"" integrity=""sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/"" crossorigin=""anonymous"">
    <script src='https://kit.fontawesome.com/a076d05399.js'></script>
    <script src=""https://code.jquery.com/jquery-1.12.4.js""></script>
    <script src=""https://code.jquery.com/ui/1.12.1/jquery-ui.js""></script>
    <script src='https://kit.fontawesome.com/a076d05399.js'></script>
   
   
    <link rel=""stylesheet"" href=""//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"">
");
                WriteLiteral("    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "dd5a184f80b191fafd605b1fe09071ef98191ff46166", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "dd5a184f80b191fafd605b1fe09071ef98191ff47345", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n    <style>\r\n    </style>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dd5a184f80b191fafd605b1fe09071ef98191ff49263", async() => {
                WriteLiteral("\r\n    <div>\r\n");
                WriteLiteral("    </div>\r\n\r\n\r\n");
                WriteLiteral("\r\n\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dd5a184f80b191fafd605b1fe09071ef98191ff49642", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dd5a184f80b191fafd605b1fe09071ef98191ff410828", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

    <script>
        var one = 11;
        let connectionId;
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl(""/noteHub"")
            .build();


        hubConnection.on(""Create"", function (note) {
            console.log('in Create')
            genNote(note)

        });

        hubConnection.on(""Delete"", async function (note) {
            console.log('in Delete')
            let id = note['id'];
            let noteId = 'note' + id;
            console.log('in Update')
            await fetch('/note/' + id, {
                method: 'DELETE',
                headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }

            })
            $('#' + noteId).remove();
        });

        hubConnection.on(""Update"", async function (note) {
            let id = note['id'];
            let noteId = 'note' + id;


            $('#' + noteId).offset(note['coords']).height(note['height']).width(note['width']);
      ");
                WriteLiteral(@"      $('#' + noteId).css(""background-color"", note['color']);
            $('#' + noteId + ' .noteBody .content textarea').val(note['context']);
            $('#' + noteId + ' .noteBody .header p textarea').val(note['header']);
        });



        async function getAllNotes() {
            let responce = await fetch('/note', {
                method: 'GET',
                headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }
            })
            if (responce.ok) {
                let notes = await responce.json();
                console.log(notes);
                notes.forEach(note =>
                    genNote(note)
                );
            }
        }

        function genNote(note) {
            console.log('in Gen')
            let noteId = note['id'];
            var id = 'note' + noteId;
            var img = $(

                '<div class=""NOTE"" id=""' + id + '"" style =""position: absolute"">' +
                '<div class=""noteHeader");
                WriteLiteral(@""">' +
                '<div class=""buttons"">' +
                ' <div id=""yellow"">' +
                '    <button onclick=""fillYellow(' + noteId + ')"" class=""button yellow""></button>' +
                '</div>' +
                ' <div id=""blue"">' +
                '    <button onclick=""fillBlue(' + noteId + ')"" class=""button blue""></button>' +
                '</div>' +
                ' <div id=""pink"">' +
                '     <button onclick=""fillPink(' + noteId + ')"" class=""button pink""></button>' +
                ' </div>' +
                ' </div>' +
                '<div id=""exit"">' +
                '     <button  onclick=""deleteNote()"" class=""btn""><i class=""fas fa-skull-crossbones"" style=""color:red""></i></button>' +
                ' </div>' +
                '</div>' +
                ' <div class=""noteBody"">' +
                '  <div class=""header"">' +
                '     <p><textarea>' + note['header'] + '</textarea></p>' +
                ' </div>' +
                ' <");
                WriteLiteral(@"div class=""content"">' +
                '     <textarea>' + note['context'] + '</textarea>' +
                ' </div>' +
                ' </div>' +
                ' <div>' +
                '    <button  onclick=""saveNote()"" class=""btn"" ><i class=""fas fa-save"" style=""color:green""></i></button>' +
                ' </div>' +
                '</div>'
            );
            $(""body"").append(img.offset(note['coords']).height(note['height']).width(note['width']).draggable().resizable());
            $('.content textarea').resizable();
            id = '#note' + noteId
            $(id).css(""background-color"", note['color']);
        }

        async function deleteNote() {
            let noteId = findNoteIdbyEvent(event)
            let id = noteId.slice(4);

            let responce = await fetch('/note/' + id, {
                method: 'POST',
                headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }


            })

            if (responce.");
                WriteLiteral(@"ok) {
                await fetch('/note', {
                    method: 'DELETE',
                    headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        id: parseInt(id, 10),
                        connectionId: connectionId
                    })
                })
            }
            $('#' + noteId).remove();

        }

        async function saveNote() {
            let noteId = findNoteIdbyEvent(event)
            let id = noteId.slice(4);
            let coords = $('#' + noteId).offset();
            let width = $('#' + noteId).width();
            let height = $('#' + noteId).height();

            let color = getCollor(noteId);
            let header = $('#' + noteId +' .noteBody .header p textarea').val();
            let content = $('#' + noteId +' .noteBody .content textarea').val();
            console.log(parseInt(id, 10))
            let note = {
                id: pa");
                WriteLiteral(@"rseInt(id, 10),
                header: header.toString(),
                context: content.toString(),
                color: color.toString(),
                height: parseInt(height),
                width: parseInt(width),
                coords: {
                    top: parseInt(coords['top']),
                    left: parseInt(coords['left'])
                }

            };
            let noteRequest = {
                note: note,
                connectionId: connectionId
            }
            console.log(noteRequest)
            let responce = await fetch('/note/' + id, {
                method: 'POST',
                headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }
            })
            if (!responce.ok) {
                await fetch(""/note"", {
                    method: ""POST"",
                    headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" },
                    body: JSON.stringify(noteRequest)");
                WriteLiteral(@"
                });
            } else {
                await fetch(""/note"", {
                    method: ""PUT"",
                    headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" },
                    body: JSON.stringify(noteRequest)
                });
            }

        }

        function findNoteIdbyEvent(event) {
            let target = event.target.parentNode;
            let className = target.className;
            while (true) {
                if (className.includes('NOTE')) {
                    break;
                }
                className = target.parentNode.className;
                target = target.parentNode;
            }
            return target.id
        }

        function parseColor(color) {
            var arr = []; color.replace(/[\d+\.]+/g, function (v) { arr.push(parseFloat(v)); });
            return {
                hex: ""#"" + arr.slice(0, 3).map(toHex).join(""""),
                opacity: arr.length == 4 ? ar");
                WriteLiteral(@"r[3] : 1
            };
        }

        function toHex(int) {
            var hex = int.toString(16);
            return hex.length == 1 ? ""0"" + hex : hex;
        }

        function getCollor(noteId) {
            let hexColor = parseColor($('#' + noteId).css('background-color'));
            let color = 'white';
            if (hexColor['hex'].includes('#ffff00')) {
                color = 'yellow';
            }
            if (hexColor['hex'].includes('#0000ff')) {
                color = 'blue';
            }
            if (hexColor['hex'].includes('#ffc0cb')) {
                color = 'pink';
            }
            return color;
        }

        window.onload = function () {
            getAllNotes();
        }

        hubConnection.start().then(() => {
            console.log(hubConnection.connectionId);
            connectionId = hubConnection.connectionId;
        });
    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
